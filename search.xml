<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何用Python写一个贪吃蛇游戏</title>
      <link href="/2023/03/14/%E5%A6%82%E4%BD%95%E7%94%A8Python%E5%86%99%E4%B8%80%E4%B8%AA%E8%B4%AA%E5%90%83%E8%9B%87%E6%B8%B8%E6%88%8F/"/>
      <url>/2023/03/14/%E5%A6%82%E4%BD%95%E7%94%A8Python%E5%86%99%E4%B8%80%E4%B8%AA%E8%B4%AA%E5%90%83%E8%9B%87%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<p>贪吃蛇游戏是一款经典的游戏，它的玩法简单、易上手，深受大众喜爱。在这篇文章中，我们将使用Python编写一个简单的贪吃蛇游戏，并通过代码分析来理解游戏的实现原理。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在开始编写代码之前，我们需要安装Pygame模块，它是一款用于开发2D游戏的Python模块。可以通过以下命令安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pygame</span><br></pre></td></tr></table></figure><p>同时，我们还需要准备好游戏所需的图片资源，包括蛇的头、身体、食物等等。</p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>在Pygame中，游戏的主循环通常包含三个部分：事件处理、游戏逻辑和图形渲染。下面我们逐一来看这三个部分的实现。</p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>在这个部分，我们需要处理用户输入的事件，例如按下上下左右键等等。对于每个事件，我们需要根据其类型进行相应的处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Copy code</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">    <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:  <span class="comment"># 点击了关闭按钮</span></span><br><span class="line">        pygame.quit()</span><br><span class="line">        sys.exit()</span><br><span class="line">    <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:  <span class="comment"># 按下了键盘</span></span><br><span class="line">        <span class="keyword">if</span> event.key == pygame.K_UP:</span><br><span class="line">            direction = <span class="string">&quot;UP&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> event.key == pygame.K_DOWN:</span><br><span class="line">            direction = <span class="string">&quot;DOWN&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">            direction = <span class="string">&quot;LEFT&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> event.key == pygame.K_RIGHT:</span><br><span class="line">            direction = <span class="string">&quot;RIGHT&quot;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们处理了两种事件：点击了关闭按钮和按下了键盘。对于按下键盘的事件，我们根据按键的类型来决定蛇的移动方向。</p><h3 id="游戏逻辑"><a href="#游戏逻辑" class="headerlink" title="游戏逻辑"></a>游戏逻辑</h3><p>在游戏逻辑部分，我们需要对蛇的状态进行更新，包括蛇的位置、长度、是否吃到食物等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> direction == <span class="string">&quot;UP&quot;</span>:</span><br><span class="line">    snake_head[<span class="number">1</span>] -= cell_size</span><br><span class="line"><span class="keyword">elif</span> direction == <span class="string">&quot;DOWN&quot;</span>:</span><br><span class="line">    snake_head[<span class="number">1</span>] += cell_size</span><br><span class="line"><span class="keyword">elif</span> direction == <span class="string">&quot;LEFT&quot;</span>:</span><br><span class="line">    snake_head[<span class="number">0</span>] -= cell_size</span><br><span class="line"><span class="keyword">elif</span> direction == <span class="string">&quot;RIGHT&quot;</span>:</span><br><span class="line">    snake_head[<span class="number">0</span>] += cell_size</span><br><span class="line"></span><br><span class="line">snake_list.insert(<span class="number">0</span>, <span class="built_in">list</span>(snake_head))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> snake_head == food_pos:</span><br><span class="line">    food_spawn = <span class="literal">False</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    snake_list.pop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> food_spawn:</span><br><span class="line">    food_pos = [random.randrange(<span class="number">0</span>, screen_width, cell_size),</span><br><span class="line">                random.randrange(<span class="number">0</span>, screen_height, cell_size)]</span><br><span class="line">    food_spawn = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否碰到了边界或自己的身体</span></span><br><span class="line"><span class="keyword">if</span> snake_head[<span class="number">0</span>] &gt;= screen_width <span class="keyword">or</span> snake_head[<span class="number">0</span>] &lt; <span class="number">0</span>:</span><br><span class="line">    game_over()</span><br><span class="line"><span class="keyword">if</span> snake_head[<span class="number">1</span>] &gt;= screen_height <span class="keyword">or</span> snake_head[<span class="number">1</span>] &lt; <span class="number">0</span>:</span><br><span class="line">    game_over()</span><br><span class="line"><span class="keyword">if</span> snake_head <span class="keyword">in</span> snake_list[<span class="number">1</span>:]:</span><br><span class="line">    game_over()</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们首先根据蛇的移动方向来更新蛇头的位置，然后在蛇的头部插入一个新的坐标，并删除蛇尾的坐标，以模拟蛇的移动。如果蛇头的坐标与食物的坐标重合，则表示蛇吃到了食物，此时我们需要生成一个新的食物，并将食物生成标志设置为True。如果蛇头的坐标碰到了边界或者碰到了自己的身体，则游戏结束。</p><h3 id="图形渲染"><a href="#图形渲染" class="headerlink" title="图形渲染"></a>图形渲染</h3><p>在这个部分，我们需要将游戏场景渲染出来，并显示蛇、食物等图形。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制蛇和食物</span></span><br><span class="line"><span class="keyword">for</span> pos <span class="keyword">in</span> snake_list:</span><br><span class="line">    pygame.draw.rect(screen, green, pygame.Rect(</span><br><span class="line">        pos[<span class="number">0</span>], pos[<span class="number">1</span>], cell_size, cell_size))</span><br><span class="line">pygame.draw.rect(screen, brown, pygame.Rect(</span><br><span class="line">    food_pos[<span class="number">0</span>], food_pos[<span class="number">1</span>], cell_size, cell_size))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新屏幕</span></span><br><span class="line">pygame.display.update()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制游戏帧率</span></span><br><span class="line">clock.tick(<span class="number">15</span>)</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用pygame.draw.rect()函数来绘制矩形，以表示蛇和食物。我们还需要通过pygame.display.update()函数来更新屏幕，以显示最新的游戏场景。最后，通过调用clock.tick()函数来控制游戏的帧率。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre><code class="python">import pygameimport randomimport sys# 初始化Pygamepygame.init()# 定义游戏界面大小、蛇身大小、食物颜色等参数screen_width = 800screen_height = 600cell_size = 20green = (0, 255, 0)brown = (165, 42, 42)# 创建游戏窗口screen = pygame.display.set_mode((screen_width, screen_height))pygame.display.set_caption(&quot;Snake Game&quot;)# 初始化蛇的位置和移动方向snake_head = [screen_width/2, screen_height/2]snake_list = [snake_head, [snake_head[0]-cell_size, snake_head[1]], [    snake_head[0]-2*cell_size, snake_head[1]]]direction = &quot;RIGHT&quot;# 初始化食物位置和生成标志food_pos = [random.randrange(0, screen_width, cell_size),            random.randrange(0, screen_height, cell_size)]food_spawn = True# 初始化游戏时钟clock = pygame.time.Clock()# 定义游戏结束函数def game_over():    pygame.quit()    sys.exit()# 游戏主循环while True:    # 事件处理    for event in pygame.event.get():        if event.type == pygame.QUIT:  # 点击了关闭按钮            pygame.quit()            sys.exit()        elif event.type == pygame.KEYDOWN:  # 按下了键盘            if event.key == pygame.K_UP:                direction = &quot;UP&quot;            elif event.key == pygame.K_DOWN:                direction = &quot;DOWN&quot;            elif event.key == pygame.K_LEFT:                direction = &quot;LEFT&quot;            elif event.key == pygame.K_RIGHT:                direction = &quot;RIGHT&quot;# 更新蛇的位置if direction == &quot;UP&quot;:    snake_head[1] -= cell_sizeelif direction == &quot;DOWN&quot;:    snake_head[1] += cell_sizeelif direction == &quot;LEFT&quot;:    snake_head[0] -= cell_sizeelif direction == &quot;RIGHT&quot;:    snake_head[0] += cell_size# 添加新的蛇头snake_head = [snake_head[0] % screen_width, snake_head[1] % screen_height]if snake_head in snake_list[:-1]:    game_over()snake_list.insert(0, snake_head)# 检测是否吃到食物if snake_head == food_pos:    food_spawn = Trueelse:    snake_list.pop()# 生成新的食物if food_spawn:    food_pos = [random.randrange(0, screen_width, cell_size),                random.randrange(0, screen_height, cell_size)]    food_spawn = False# 绘制蛇和食物screen.fill((255, 255, 255))for pos in snake_list:    pygame.draw.rect(screen, green, pygame.Rect(        pos[0], pos[1], cell_size, cell_size))pygame.draw.rect(screen, brown, pygame.Rect(    food_pos[0], food_pos[1], cell_size, cell_size))# 更新屏幕pygame.display.update()# 控制游戏帧率clock.tick(15)</code></pre><p>完整代码中，我们通过不断地监听事件，来处理玩家的输入并更新蛇的位置和移动方向。在检测到蛇头的位置与食物位置重合时，我们生成一个新的食物，并将食物生成标志设置为True。在图形渲染的部分，我们使用pygame.draw.rect()函数来绘制矩形，并使用pygame.display.update()函数来更新屏幕。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了如何使用Python和Pygame库来编写一个贪吃蛇游戏。在编写游戏时，我们需要涉及到事件处理、游戏逻辑和图形渲染等方面。通过学习本文，相信读者已经掌握了一定的Pygame编程技进一步开发自己的游戏项目。除此之外，读者也可以通过学习其他Pygame的教程和示例代码，不断提升自己的Pygame编程技能，开发更加复杂、有趣的游戏项目。</p><p>在实际开发过程中，还需要注意以下几点：</p><p>游戏开发需要进行良好的项目规划和设计，包括游戏逻辑、界面设计、用户体验等方面。<br>需要进行有效的错误处理和调试，确保游戏运行稳定和流畅。<br>需要适当地优化游戏代码，提高游戏的运行效率和性能。<br>希望本文对读者学习Python和Pygame编程有所帮助。如果读者在学习过程中有任何疑问或建议，欢迎在评论区留言，我将尽力解答。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/14/hello-world/"/>
      <url>/2023/03/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MAC M1安装多个JDK版本及动态切换</title>
      <link href="/2022/05/23/MAC-M1%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AAJDK%E7%89%88%E6%9C%AC%E5%8F%8A%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2/"/>
      <url>/2022/05/23/MAC-M1%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AAJDK%E7%89%88%E6%9C%AC%E5%8F%8A%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>#JDK版本下载</p><ol><li>下载地址：<a href="https://www.azul.com/downloads/?package=jdk">https://www.azul.com/downloads/?package=jdk</a><br>筛选一下macOS的ARM 64-bit架构的JDK版本，下载对应版本即可。<img src="https://img2022.cnblogs.com/blog/2391447/202205/2391447-20220523184055378-1650556142.png" alt="image">最好直接下载.dmg格式，最方便安装。</li><li>下载完毕之后直接双击运行<img src="https://img2022.cnblogs.com/blog/2391447/202205/2391447-20220523184432001-922593407.png" alt="image">按照操作一步步走，直到安装完毕。</li><li>打开 访达 ，shift+command+g跳转到&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines目录下<img src="https://img2022.cnblogs.com/blog/2391447/202205/2391447-20220523184734825-766406956.png" alt="image">查看刚安装的jdk版本是否已经安装好了。</li></ol><p>#配置环境</p><ol><li>打开终端输入以下命令 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">vim ~/.bash_profile <span class="comment">#.bash_profile对当前用户生效等价于.zprofile</span></span><br><span class="line"><span class="comment">##以下不用</span></span><br><span class="line"><span class="comment"># 如需切换到bash</span></span><br><span class="line">chsh -s /bin/bash</span><br><span class="line"><span class="comment"># 切换到zsh</span></span><br><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></li><li>在配置文件中添加以下内容，下面的版本号替换成自己电脑上的版本，如果有多个JDK，照下面改一下就行 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置JDK路径</span></span><br><span class="line"><span class="built_in">export</span> JAVA_8_HOME=/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home</span><br><span class="line"><span class="built_in">export</span> JAVA_11_HOME=/Library/Java/JavaVirtualMachines/zulu-11.jdk/Contents/Home</span><br><span class="line"><span class="comment"># 设置默认JDK版本</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$JAVA_11_HOME</span></span><br><span class="line">CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:.</span><br><span class="line"><span class="comment"># 配置alias命令动态切换JDK版本  </span></span><br><span class="line"><span class="built_in">alias</span> jdk8=<span class="string">&quot;export JAVA_HOME=<span class="variable">$JAVA_8_HOME</span>&quot;</span></span><br><span class="line"><span class="built_in">alias</span> jdk11=<span class="string">&quot;export JAVA_HOME=<span class="variable">$JAVA_11_HOME</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"><span class="built_in">export</span> CLASSPATH</span><br></pre></td></tr></table></figure></li><li>按esc<code>:wq</code>退出后执行 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></li><li>验证是否成功 <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RyosetssandeAir:~ yuki$ java -version</span><br><span class="line">openjdk version <span class="string">&quot;11.0.15&quot;</span> 2022-04-19 LTS</span><br><span class="line">OpenJDK Runtime Environment Zulu11.56+19-CA (build 11.0.15+10-LTS)</span><br><span class="line">OpenJDK 64-Bit Server VM Zulu11.56+19-CA (build 11.0.15+10-LTS, mixed mode)</span><br><span class="line">RyosetssandeAir:~ yuki$ jdk8</span><br><span class="line">RyosetssandeAir:~ yuki$ java -version</span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_302&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (Zulu 8.56.0.23-CA-macos-aarch64) (build 1.8.0_302-b08)</span><br><span class="line">OpenJDK 64-Bit Server VM (Zulu 8.56.0.23-CA-macos-aarch64) (build 25.302-b08, mixed mode)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> MAC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
